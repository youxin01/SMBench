```markdown
# 优化类问题函数调用报告
## 1. 问题识别
目标：找到从起点站 v₁ 到终点站 v₈ 的实际耗时最短路线。
- 问题类型：图论中的最短路径问题，涉及加权有向图。
- 输入数据：地铁站点间的行驶时间及额外限制条件。
- 约束条件：
  - v₅ → v₆ 实际耗时增加 3 分钟（原 5 分钟 → 8 分钟）。
  - v₂ 站等待 3 分钟可换乘特快列车，v₂ → v₅ 耗时从 9 分钟降至 5 分钟。
  - v₇ → v₆ 不可通行（即图中不存在该边）。

## 2. 优化函数选择
### 3.1 函数调用说明
使用 Dijkstra 算法计算最短路径，需将额外条件整合到边的权重中：
- 将 v₅ → v₆ 的权重设为 8 分钟。
- 将 v₂ → v₅ 的权重设为 5 分钟（假设乘客选择等待换乘特快列车）。
- 忽略 v₇ → v₆ 的边。

```python
[
    {
        "name": "dijkstra",
        "args": {
            "edges": {
                ("v₁", "v₂"): 4,
                ("v₁", "v₃"): 6,
                ("v₂", "v₄"): 5,
                ("v₂", "v₅"): 5,  # 特快列车优化后
                ("v₃", "v₂"): 7,
                ("v₃", "v₄"): 4,
                ("v₄", "v₅"): 1,
                ("v₄", "v₆"): 4,
                ("v₅", "v₆"): 8,  # 施工增加3分钟
                ("v₅", "v₇"): 7,
                ("v₆", "v₇"): 6,
                ("v₇", "v₈"): 6
            },
            "start": "v₁",
            "end": "v₈"
        }
    }
]
```